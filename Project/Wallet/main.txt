 الأدوات المستخدمة
json: لقراءة وكتابة البيانات في ملفات JSON (الرصيد، المعاملات).

os: للتحقق من وجود الملفات (exists).

getpass: لإدخال كلمة المرور بطريقة مخفية (دون عرضها).

hashlib: لتشفير كلمات المرور باستخدام خوارزمية SHA-256.

datetime: لتسجيل تاريخ ووقت كل عملية (إضافة أو صرف المال).

ألوان ANSI (مثل \033[91m) لتلوين مخرجات النص في الطرفية (أحمر، أخضر، أصفر، أزرق، إلخ).

-=------------------------------------------------------------------------------------
 الأدوات المستخدمة
json: لقراءة وكتابة البيانات في ملفات JSON (الرصيد، المعاملات).

os: للتحقق من وجود الملفات (exists).

getpass: لإدخال كلمة المرور بطريقة مخفية (دون عرضها).

hashlib: لتشفير كلمات المرور باستخدام خوارزمية SHA-256.

datetime: لتسجيل تاريخ ووقت كل عملية (إضافة أو صرف المال).

ألوان ANSI (مثل \033[91m) لتلوين مخرجات النص في الطرفية (أحمر، أخضر، أصفر، أزرق، إلخ).

--------------------------------------------------------------------------------------------
شرح طريقة التفكير (منطق العمل)
التأكد من أمان البرنامج

يبدأ البرنامج بالتحقق من وجود ملف لكلمة المرور.

إذا الملف غير موجود (تشغيل أول مرة)، يُطلب من المستخدم إنشاء كلمة مرور، تُخزن مشفرة.

إذا الملف موجود، يطلب البرنامج من المستخدم إدخال كلمة المرور، ويقارنها مع النسخة المشفرة في الملف. يسمح بثلاث محاولات فقط.

إدارة الرصيد

تحميل الرصيد الحالي من ملف JSON (أو افتراض صفر إذا لم يكن موجودًا).

بعد كل تعديل (إضافة أو صرف)، يتم تحديث ملف الرصيد.

تسجيل المعاملات

كل عملية إضافة أو صرف مال تُسجل في ملف JSON منفصل، مع نوع المعاملة، المبلغ، الوصف (مثل مصدر المال أو ما تم شراؤه)، والتاريخ/الوقت.

التفاعل مع المستخدم

القائمة الرئيسية تقدم خيارات واضحة لإضافة مبلغ، صرف مبلغ، عرض الرصيد، عرض سجل المعاملات، والخروج.

كل خيار يتطلب إدخال بيانات مناسبة مع تحقق من صحة الإدخال (مثلاً: المبلغ يجب أن يكون رقم موجب).

في حالة الخطأ في الإدخال، يتم إعلام المستخدم برسالة واضحة ملونة.

حفظ البيانات باستمرار

بعد كل عملية ناجحة، يتم حفظ الرصيد والمعاملات لضمان عدم فقدان المعلومات.


